/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "keys_fr_canadian_standard.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    macros {
        BT_PROFILE: BT_PROFILE {
            // ...

            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>; // Must be 1
            bindings = <&out OUT_BLE &macro_param_1to2 &bt BT_SEL MACRO_PLACEHOLDER>;
        };

        FR_CMS_O_CIR: FR_CMS_O_CIR {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp FR_CARET &kp FR_O>;
            label = "FR_CMS_O_CIR";
        };

        FR_CMS_E_CIR: FR_CMS_E_CIR {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp FR_CARET &kp FR_E>;
            label = "FR_CMS_E_CIR";
        };
    };

    combos {
        compatible = "zmk,combos";

        EACUTE {
            bindings = <&kp FR_E_ACUTE>;
            key-positions = <15 16>;
        };

        EGRAVE {
            bindings = <&kp FR_E_GRAVE>;
            key-positions = <15 14>;
        };

        AGRAVE {
            bindings = <&kp FR_A_GRAVE>;
            key-positions = <25 26>;
        };

        CCEDILA {
            bindings = <&kp FR_C_CEDILLA>;
            key-positions = <38 39>;
        };

        UGRAVE {
            bindings = <&kp FR_U_GRAVE>;
            key-positions = <18 19>;
        };

        END_COMBO {
            bindings = <&FR_CMS_O_CIR>;
            key-positions = <22 21 20>;
        };

        FR_E_CIRC {
            bindings = <&FR_CMS_E_CIR>;
            key-positions = <15 14 16>;
        };
    };

    behaviors {
        shift_lt: shift_lt {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT_LT";
            bindings = <&kp FR_COMMA>, <&kp FR_LESS_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        shift_gt: shift_gt {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT_GT";
            bindings = <&kp FR_DOT>, <&kp FR_GREATER_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        shift_at: shift_at {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT_AT";
            bindings = <&kp FR_N2>, <&kp FR_AT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        shift_pound: shift_pound {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT_POUND";
            bindings = <&kp FR_N3>, <&kp FR_POUND>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        shift_del: shift_del {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT_DEL";
            bindings = <&kp BACKSPACE>, <&kp DEL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        shift_left_brace: shift_left_brace {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT_LEFT_BRACE";
            bindings = <&kp FR_LEFT_BRACKET>, <&kp FR_LEFT_BRACE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        shift_right_brace: shift_right_brace {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT_RIGHT_BRACE";
            bindings = <&kp FR_RIGHT_BRACKET>, <&kp FR_RIGHT_BRACE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        shift_qmark: shift_qmark {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT_QMARK";
            bindings = <&kp FR_SLASH>, <&kp FR_QUESTION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
            keep-mods = <(MOD_LSFT)>;
        };

        shift_dquote: shift_dquote {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT_DQUOTE";
            bindings = <&kp FR_SINGLE_QUOTE>, <&kp FR_DOUBLE_QUOTES>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
            keep-mods = <(MOD_LSFT)>;
        };

        shift_tilde: shift_tilde {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT_TILDE";
            bindings = <&kp FR_GRAVE>, <&kp FR_TILDE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp ESC         &kp N1  &kp N2  &kp N3    &kp N4    &kp N5                                                   &kp N6      &kp N7  &kp N8      &kp N9     &kp N0        &kp MINUS
&kp TAB         &kp Q   &kp W   &kp E     &kp R     &kp T                                                    &kp Y       &kp U   &kp I       &kp O      &kp P         &kp EQUAL
&kp LEFT_SHIFT  &kp A   &kp S   &kp D     &kp F     &kp G                                                    &kp H       &kp J   &kp K       &kp L      &kp SEMI      &shift_dquote
&kp LCTRL       &kp Z   &kp X   &kp C     &kp V     &kp B           &shift_left_brace    &shift_right_brace  &kp N       &kp M   &shift_lt   &shift_gt  &shift_qmark  &kp F12
                                &kp LGUI  &kp LALT  &kp LEFT_SHIFT  &kp SPACE            &lt 1 ENTER         &shift_del  &mo 2   &kp ESCAPE
            >;
        };

        raise_layer {
            bindings = <
&kp FR_TILDE  &kp F1  &kp F2  &kp F3    &kp F4   &kp F5                                                 &kp F6       &kp F7     &kp F8           &kp F9     &kp F10           &kp F11
&kp FR_PIPE   &trans  &trans  &trans    &trans   &trans                                                 &trans       &trans     &trans           &trans     &trans            &trans
&trans        &trans  &trans  &kp HOME  &kp END  &trans                                                 &kp LEFT     &kp DOWN   &kp UP           &kp RIGHT  &trans            &kp FR_GRAVE
&trans        &trans  &trans  &trans    &trans   &trans  &kp LEFT_PARENTHESIS    &kp RIGHT_PARENTHESIS  &kp KP_PLUS  &kp MINUS  &kp EQUAL        &kp LBKT   &kp FR_BACKSLASH  &kp F12
                              &trans    &trans   &trans  &kp FR_SLASH            &none                  &trans       &trans     &kp PRINTSCREEN
            >;
        };

        meta_layer {
            bindings = <
&out OUT_USB  &BT_PROFILE 0     &BT_PROFILE 1      &BT_PROFILE 2      &BT_PROFILE 3  &BT_PROFILE 4                                                       &trans     &trans     &trans           &trans    &bt BT_CLR  &trans
&kp F1        &kp F2            &kp F3             &kp F4             &kp F5         &kp F6                                                              &kp F7     &kp F8     &kp F9           &kp F10   &kp F11     &kp F12
&kp GRAVE     &kp EXCL          &kp AT             &kp HASH           &kp DOLLAR     &kp PRCNT                                                           &kp CARET  &kp AMPS   &kp KP_MULTIPLY  &kp LPAR  &kp RPAR    &kp TILDE
&trans        &ext_power EP_ON  &ext_power EP_OFF  &ext_power EP_TOG  &trans         &trans         &kp FR_LEFT_PARENTHESIS    &kp FR_RIGHT_PARENTHESIS  &trans     &kp MINUS  &kp KP_PLUS      &kp LBRC  &kp RBRC    &kp PIPE
                                                   &bootloader        &trans         &trans         &trans                     &trans                    &trans     &trans     &trans
            >;
        };
    };
};
